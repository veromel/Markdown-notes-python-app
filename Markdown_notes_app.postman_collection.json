{
	"info": {
		"_postman_id": "3bc2bd70-f15d-4adb-90f6-4c979cebcbd9",
		"name": "Markdown_notes_app",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37084789"
	},
	"item": [
		{
			"name": "users",
			"item": [
				{
					"name": "register",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"test@example.com\",\n    \"password\": \"securePassword123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/v1/auth/register",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						},
						"description": "Register a new user with email and password.\n\n**Request Body**\n- email (string, required): The user's email address.\n- password (string, required): The user's password.\n\n**Response**\n- Status: 201 Created\n- Content-Type: application/json\n- user_id (string): The unique identifier for the created user.\n- email (string): The registered email."
					},
					"response": []
				},
				{
					"name": "login",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"test@example.com\",\n    \"password\": \"securePassword123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/v1/auth/login",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						},
						"description": "Log in with user credentials and get an access token.\n\n**Request Body**\n- email (string, required): The user's email address.\n- password (string, required): The user's password.\n\n**Response**\n- Status: 200 OK\n- Content-Type: application/json\n- access_token (string): JWT token to use for authenticated requests.\n- token_type (string): Type of token (e.g., \"bearer\")."
					},
					"response": []
				},
				{
					"name": "me",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/v1/auth/me",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"v1",
								"auth",
								"me"
							]
						},
						"description": "Get the current authenticated user's profile information.\n\n**Headers**\n- Authorization: Bearer {{access_token}}\n\n**Response**\n- Status: 200 OK\n- Content-Type: application/json\n- user_id (string): The unique identifier for the user.\n- email (string): The user's email address."
					},
					"response": []
				}
			],
			"description": "Endpoints for user authentication and management."
		},
		{
			"name": "notes",
			"item": [
				{
					"name": "create",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Mi primera nota\",\n    \"content\": \"Este es el contenido de mi primera nota.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/v1/notes",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"v1",
								"notes"
							]
						},
						"description": "Create a new note for the authenticated user.\n\n**Headers**\n- Authorization: Bearer {{access_token}}\n\n**Request Body**\n- title (string, required): The title of the note.\n- content (string, required): The content of the note in markdown format.\n\n**Response**\n- Status: 201 Created\n- Content-Type: application/json\n- id (string): The unique identifier of the note.\n- title (string): The title of the note.\n- content (string): The content of the note.\n- user_id (string): The ID of the owner.\n- created_at (string): The timestamp when the note was created.\n- updated_at (string): The timestamp of the last update."
					},
					"response": []
				},
				{
					"name": "list_notes",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/v1/notes",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"v1",
								"notes"
							]
						},
						"description": "Get all notes for the authenticated user.\n\n**Headers**\n- Authorization: Bearer {{access_token}}\n\n**Response**\n- Status: 200 OK\n- Content-Type: application/json\n- Array of note objects, each containing:\n  - id (string): The unique identifier of the note.\n  - title (string): The title of the note.\n  - content (string): The content of the note.\n  - user_id (string): The ID of the owner.\n  - created_at (string): The timestamp when the note was created.\n  - updated_at (string): The timestamp of the last update."
					},
					"response": []
				},
				{
					"name": "get_by_id",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/v1/notes/{{note_id}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"v1",
								"notes",
								"{{note_id}}"
							]
						},
						"description": "Get a specific note by ID. Only accessible if the note belongs to the authenticated user.\n\n**Headers**\n- Authorization: Bearer {{access_token}}\n\n**Path Parameters**\n- note_id (string): The unique identifier of the note.\n\n**Response**\n- Status: 200 OK\n- Content-Type: application/json\n- id (string): The unique identifier of the note.\n- title (string): The title of the note.\n- content (string): The content of the note.\n- user_id (string): The ID of the owner.\n- created_at (string): The timestamp when the note was created.\n- updated_at (string): The timestamp of the last update."
					},
					"response": []
				},
				{
					"name": "check_grammar",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"Este es un ejemplo de un texto con un error gramatical.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/v1/notes/check-grammar",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"v1",
								"notes",
								"check-grammar"
							]
						},
						"description": "Check the grammar of a text without saving it as a note.\n\n**Headers**\n- Authorization: Bearer {{access_token}}\n\n**Request Body**\n- content (string, required): The text to check for grammar errors.\n\n**Response**\n- Status: 200 OK\n- Content-Type: application/json\n- errors (array): List of grammar errors found in the text."
					},
					"response": []
				},
				{
					"name": "check_note_grammar",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"Este es un ejemplo de un texto con error gramatical.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/v1/notes/{{note_id}}/check-grammar",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"v1",
								"notes",
								"{{note_id}}",
								"check-grammar"
							]
						},
						"description": "Check the grammar of a specific note. Only accessible if the note belongs to the authenticated user.\n\n**Headers**\n- Authorization: Bearer {{access_token}}\n\n**Path Parameters**\n- note_id (string): The unique identifier of the note.\n\n**Request Body**\n- content (string, required): The text to check for grammar errors.\n\n**Response**\n- Status: 200 OK\n- Content-Type: application/json\n- errors (array): List of grammar errors found in the text."
					},
					"response": []
				},
				{
					"name": "delete",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/v1/notes/{{note_id}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"v1",
								"notes",
								"{{note_id}}"
							]
						},
						"description": "Delete a specific note. Only accessible if the note belongs to the authenticated user.\n\n**Headers**\n- Authorization: Bearer {{access_token}}\n\n**Path Parameters**\n- note_id (string): The unique identifier of the note.\n\n**Response**\n- Status: 204 No Content"
					},
					"response": []
				},
				{
					"name": "update",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Título actualizado\",\n    \"content\": \"Contenido actualizado de la nota.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8000/api/v1/notes/{{note_id}}",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"v1",
								"notes",
								"{{note_id}}"
							]
						},
						"description": "Update a specific note. Only accessible if the note belongs to the authenticated user.\n\n**Headers**\n- Authorization: Bearer {{access_token}}\n\n**Path Parameters**\n- note_id (string): The unique identifier of the note.\n\n**Request Body**\n- title (string, required): The updated title of the note.\n- content (string, required): The updated content of the note.\n\n**Response**\n- Status: 200 OK\n- Content-Type: application/json\n- The updated note object."
					},
					"response": []
				}
			],
			"description": "Endpoints for managing notes. All endpoints require authentication."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Auto-extract the access token from login response",
					"if (pm.response.code === 200 && pm.info.requestName === \"login\") {",
					"    const jsonResponse = pm.response.json();",
					"    if (jsonResponse.access_token) {",
					"        pm.environment.set(\"access_token\", jsonResponse.access_token);",
					"        console.log(\"Token saved to environment\");",
					"    }",
					"}",
					"",
					"// Auto-extract note ID from create note response",
					"if (pm.response.code === 201 && pm.info.requestPath.includes(\"/notes\") && pm.request.method === \"POST\") {",
					"    const jsonResponse = pm.response.json();",
					"    if (jsonResponse.id) {",
					"        pm.environment.set(\"note_id\", jsonResponse.id);",
					"        console.log(\"Note ID saved to environment\");",
					"    }",
					"}"
				]
			}
		}
	]
}